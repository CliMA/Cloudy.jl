"Testing correctness of Distributions module."

using SpecialFunctions: gamma, gamma_inc
using Cloudy.Distributions

import Cloudy.Distributions: nparams, get_params, update_params,
                             check_moment_consistency, moment_func, density_func


## Exponential distribution
## Initialization
#dist = Exponential(1.0, 1.0)
#@test (dist.n, dist.θ) == (FT(1.0), FT(1.0))
#@test_throws Exception Exponential(-1.0, 2.)
#@test_throws Exception Exponential(1.0, -2.)
#
## Getters and setters
#@test nparams(dist) == 2
#@test get_params(dist) == ([:n, :θ], [1.0, 1.0]) 
#dist = update_params(dist, [1.0, 2.0]) 
#@test get_params(dist) == ([:n, :θ], [1.0, 2.0]) 
#@test_throws Exception update_params(dist, [-0.2, 1.1]) 
#@test_throws Exception update_params(dist, [0.2, -1.1]) 
#
## Partial moments, moments, density
#dist = Exponential(1.0, 2.0)
#rl, ru = 0.0, 1.0
#@test moment_func(dist, rl=rl, ru=ru)(1.0, 2.0, 0.0) ≈ 1 - exp(-0.5) atol=1e-6
#rl, ru = 0.0, 2.0
#@test moment_func(dist, rl=rl, ru=ru)(1.0, 2.0, 1.0) ≈ 2.0 * (1 - 2*exp(-1)) atol=1e-6 
#rl, ru = 0.0, 1.0
#@test moment(dist, 0.0, rl, ru) ≈ 1 - exp(-0.5) atol=1e-6
#rl, ru = 0.0, 2.0
#@test moment(dist, 1.0, rl, ru) ≈ 2.0 * (1 - 2*exp(-1)) atol=1e-6 
#@test moment(dist, 0.0) == 1.0
#@test moment(dist, 10.0) == 2.0^10.0 * gamma(11.0) 
#@test density_func(dist)(1.0, 2.0, 0.0) == 0.5
#@test density_func(dist)([1.0, 1.0], [2.0, 2.0], [0.0, 3.1]) == [0.5,0.5 * exp(-3.1 / 2.0)]
#@test density(dist, 0.0) == 0.5
#@test density(dist, 3.1) == 0.5 * exp(-3.1 / 2.0)
#@test_throws Exception density(dist, -3.1)
#
## Update params from moments
#dist = update_params_from_moments(dist, Array{FT}([1.1, 2.0]))
#@test moment(dist, 0.0) ≈ 1.1 atol=1e-6
#@test moment(dist, 1.0) ≈ 2.0 atol=1e-6


# Gamma distribution
# Initialization
dist = Gamma(1.0, 1.0, 2.0)
@test (dist.n, dist.θ, dist.k) == (FT(1.0), FT(1.0), FT(2.0))
@test_throws Exception Gamma(-1.0, 2.0, 3.0)
@test_throws Exception Gamma(1.0, -2.0, 3.0)
@test_throws Exception Gamma(1.0, 2.0, -3.0)

# Getters and settes
@test nparams(dist) == 3
@test get_params(dist) == ([:n, :θ, :k], [1.0, 1.0, 2.0])
dist = update_params(dist, [1.0, 2.0, 1.0]) 
@test get_params(dist) == ([:n, :θ, :k], [1.0, 2.0, 1.0])
@test_throws Exception update_params(dist, [-0.2, 1.1, 3.4]) 
@test_throws Exception update_params(dist, [0.2, -1.1, 3.4]) 
@test_throws Exception update_params(dist, [0.2, 1.1, -3.4]) 

# Partial moments, moments, density
dist = Gamma(1.0, 1.0, 2.0)
rl, ru = 0.0, 1.1
inc_lower = gamma_inc(2.0, 0.0, 1)[1]
inc_upper = gamma_inc(2.0, 1.1, 1)[2]
@test moment_func(dist, rl=rl, ru=ru)(1.0, 1.0, 2.0, 0.0) == 1.0 - inc_lower - inc_upper
@test moment(dist, 0.0, rl, ru) == 1.0 - inc_lower - inc_upper
@test moment(dist, 1.0) == 2.0
@test moment(dist, 2.0) == 6.0
@test moment(dist, 2/3) ≈ gamma(2+2/3)/gamma(2)
@test density_func(dist)(1.0, 1.0, 2.0, 0.0) == 0.0
@test density_func(dist)([1.0, 1.0], [1.0, 1.0], [2.0, 2.0], [0.0, 3.0]) == [0.0, 3/gamma(2)*exp(-3)]
@test density(dist, 0.0) == 0.0
@test density(dist, 3.0) == 3/gamma(2)*exp(-3)
@test_throws Exception density(dist, -3.1)

# Update params from moments
dist = update_params_from_moments(dist, Array{FT}([1.1, 2.0, 4.1]))
#@test moment(dist, 0.0) ≈ 1.1 atol=1e-6
#@test moment(dist, 1.0) ≈ 2.0 atol=1e-6
#@test moment(dist, 2.0) ≈ 4.1 atol=1e-6
#dist = update_params_from_moments(dist, Array{FT}([1.1, 2.423, 8.112]))
#@test moment(dist, 0.0) ≈ 1.1 atol=1e-6
#@test moment(dist, 1.0) ≈ 2.423 atol=1e-6
#@test moment(dist, 2.0) ≈ 8.112 atol=1e-6
#
#
## Truncated distributions 
## Initialization
#rl, ru = 0.0, 2.0
#dist = Truncated(Exponential(1.0, 1.0), rl, ru) 
#@test typeof(dist.primitive) == Exponential{FT}
#@test dist.rl == rl
#@test dist.ru == ru
#
## Getters and setters
#@test nparams(dist) == 2
#@test get_params(dist) == ([:n, :θ], [1.0, 1.0]) 
#dist = update_params(dist, [1.0, 2.0]) 
#@test get_params(dist) == ([:n, :θ], [1.0, 2.0]) 
#@test_throws Exception update_params(dist, [-0.2, 1.1]) 
#@test_throws Exception update_params(dist, [0.2, -1.1]) 
#
## Partial moments, moments, density
#dist = Truncated(Exponential(1.0, 2.0), rl, ru) 
#rll, ruu = 0.0, 1.0
#@test moment_func(dist, rl=rll, ru=ruu)(1.0, 2.0, 0.0) ≈ 1 - exp(-0.5) atol=1e-6
#@test moment(dist, 0.0, 0.0, 1.0) ≈ 1 - exp(-0.5) atol=1e-6
#@test moment(dist, 0.0, 0.0, 3.0) ≈ 1 - exp(-1.0) atol=1e-6
#@test moment(dist, 0.0, 1.0, 2.0) ≈ exp(-0.5) - exp(-1) atol=1e-6 
#@test moment(dist, 0.0, 10.0, 20.0) == 0.0
#@test moment(dist, 0.0) == moment(Exponential(1.0, 2.0), 0.0, 0.0, 2.0)
#@test density_func(dist)(1.0, 2.0, 0.0) == 0.5
#@test_broken density_func(dist)([1.0, 1.0], [2.0, 2.0], [0.0, 3.1]) == [0.5, 0.0]
#@test density(dist, 0.0) == 0.5 
#@test density(dist, 3.1) == 0.0
#@test_throws Exception density(dist, -3.1)
#
## Update params from moments
#
#
## Mixture distributions
## Initialization
#dist = Mixture(Exponential(1.0, 1.0), Exponential(2.0, 2.0))
#@test typeof(dist.subdists) == Array{Distribution{FT}, 1}
#@test length(dist.subdists) == 2
#
## Getters and setters
#@test nparams(dist) == 4
#@test get_params(dist) == ([[:n, :θ], [:n, :θ]], [[1.0, 1.0], [2.0, 2.0]])
#dist = update_params(dist, [0.2, 0.4, 3.1, 4.1])
#@test get_params(dist) == ([[:n, :θ], [:n, :θ]], [[0.2, 0.4], [3.1, 4.1]]) 
#@test_throws Exception update_params(dist, [-0.2, 1.1, 1.1, 2.1]) 
#@test_throws Exception update_params(dist, [0.2, -1.1, 0.1, 3.1]) 
#@test_throws Exception update_params(dist, [0.2, 1.1, -0.1, 3.1]) 
#@test_throws Exception update_params(dist, [0.2, 1.1, 0.1, -3.1]) 
#
## Partial moments, moments, density
##dist = update_params(dist, [1.0, 1.0, 2.0, 2.0])
##r = (1.1, 2.3)
##p1 = moment(Exponential(1.0, 1.0), 2.23, r)
##p2 = moment(Exponential(2.0, 2.0), 2.23, r)
##@test moment(dist, 2.23, r) == p1 + p2
##@test moment(dist, 0.0) == 3.0
##@test moment(dist, 1.0) == 5.0
##@test moment(dist, 11.0) ≈ gamma(12) + 2.0 * 2.0^11 * gamma(12.0) atol=1e-6
##@test density(dist, 0.0) == 2.0
##@test density(dist, 1.0) == exp(-1.0) + exp(-0.5)
##@test_throws Exception density(dist, -3.1)
##
##t1 = Truncated(Exponential(1.0, 1.0), (0.0, 2.0))
##t2 = Truncated(Exponential(2.0, 2.0), (2.0, 1e16))
##dist = Mixture(t1, t2)
##q = 3.4
##r = (0.0, 2.0)
##@test moment(dist, q, r) == moment(Exponential(1.0, 1.0), q, r)
##r = (2.0, 1e16)
##@test moment(dist, q, r) == moment(Exponential(2.0, 2.0), q, r)
##r = (1.0, 3.0)
##p1 = moment(Exponential(1.0, 1.0), q, (1.0, 2.0))
##p2 = moment(Exponential(2.0, 2.0), q, (2.0, 3.0))
##@test moment(dist, q, r) == p1 + p2 
##p1 = moment(Exponential(1.0, 1.0), q, (0.0, 2.0))
##p2 = moment(Exponential(2.0, 2.0), q, (2.0, 1e16))
##@test moment(dist, q) == p1 + p2 
##
##
### Update params from moments
##dist = Truncated(Gamma(2.0, 1.0, 3.0), (0.0, 2.0)) 
##dist = update_params_from_moments(dist, [1.0, 1.0, 3.0])
#
## Moment consitency checks
#m = [1.1, 2.1]
#@test check_moment_consistency(m) == nothing
#m = [0.0, 0.0]
#@test check_moment_consistency(m) == nothing
#m = [0.0, 1.0, 2.0]
#@test check_moment_consistency(m) == nothing
#m = [1.0, 1.0, 2.0]
#@test check_moment_consistency(m) == nothing
#m = [-0.1, 1.0]
#@test_throws Exception check_moment_consistency(m)
#m = [0.1, -1.0]
#@test_throws Exception check_moment_consistency(m)
#m = [1.0, 3.0, 2.0]
#@test_throws Exception check_moment_consistency(m)
